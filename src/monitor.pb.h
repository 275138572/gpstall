// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#ifndef PROTOBUF_monitor_2eproto__INCLUDED
#define PROTOBUF_monitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gpstall {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_monitor_2eproto();
void protobuf_AssignDesc_monitor_2eproto();
void protobuf_ShutdownFile_monitor_2eproto();

class Command;
class ServiceStatus;

enum ServiceStatus_Status {
  ServiceStatus_Status_ONLINE = 0,
  ServiceStatus_Status_STALL = 1,
  ServiceStatus_Status_UNKNOW = 2
};
bool ServiceStatus_Status_IsValid(int value);
const ServiceStatus_Status ServiceStatus_Status_Status_MIN = ServiceStatus_Status_ONLINE;
const ServiceStatus_Status ServiceStatus_Status_Status_MAX = ServiceStatus_Status_UNKNOW;
const int ServiceStatus_Status_Status_ARRAYSIZE = ServiceStatus_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServiceStatus_Status_descriptor();
inline const ::std::string& ServiceStatus_Status_Name(ServiceStatus_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServiceStatus_Status_descriptor(), value);
}
inline bool ServiceStatus_Status_Parse(
    const ::std::string& name, ServiceStatus_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServiceStatus_Status>(
    ServiceStatus_Status_descriptor(), name, value);
}
// ===================================================================

class Command : public ::google::protobuf::Message {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Command& default_instance();

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  Command* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string command = 1 [default = "error"];
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 1;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // @@protoc_insertion_point(class_scope:gpstall.Command)
 private:
  inline void set_has_command();
  inline void clear_has_command();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* command_;
  static ::std::string* _default_command_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_monitor_2eproto();
  friend void protobuf_AssignDesc_monitor_2eproto();
  friend void protobuf_ShutdownFile_monitor_2eproto();

  void InitAsDefaultInstance();
  static Command* default_instance_;
};
// -------------------------------------------------------------------

class ServiceStatus : public ::google::protobuf::Message {
 public:
  ServiceStatus();
  virtual ~ServiceStatus();

  ServiceStatus(const ServiceStatus& from);

  inline ServiceStatus& operator=(const ServiceStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceStatus& default_instance();

  void Swap(ServiceStatus* other);

  // implements Message ----------------------------------------------

  ServiceStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceStatus& from);
  void MergeFrom(const ServiceStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServiceStatus_Status Status;
  static const Status ONLINE = ServiceStatus_Status_ONLINE;
  static const Status STALL = ServiceStatus_Status_STALL;
  static const Status UNKNOW = ServiceStatus_Status_UNKNOW;
  static inline bool Status_IsValid(int value) {
    return ServiceStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    ServiceStatus_Status_Status_MIN;
  static const Status Status_MAX =
    ServiceStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    ServiceStatus_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return ServiceStatus_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return ServiceStatus_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return ServiceStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string start_time = 1;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const char* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
  inline bool has_service_status() const;
  inline void clear_service_status();
  static const int kServiceStatusFieldNumber = 2;
  inline ::gpstall::ServiceStatus_Status service_status() const;
  inline void set_service_status(::gpstall::ServiceStatus_Status value);

  // required int32 conn_num = 3;
  inline bool has_conn_num() const;
  inline void clear_conn_num();
  static const int kConnNumFieldNumber = 3;
  inline ::google::protobuf::int32 conn_num() const;
  inline void set_conn_num(::google::protobuf::int32 value);

  // required int32 qps = 4;
  inline bool has_qps() const;
  inline void clear_qps();
  static const int kQpsFieldNumber = 4;
  inline ::google::protobuf::int32 qps() const;
  inline void set_qps(::google::protobuf::int32 value);

  // required int32 gpload_failed_num = 5;
  inline bool has_gpload_failed_num() const;
  inline void clear_gpload_failed_num();
  static const int kGploadFailedNumFieldNumber = 5;
  inline ::google::protobuf::int32 gpload_failed_num() const;
  inline void set_gpload_failed_num(::google::protobuf::int32 value);

  // required string lastest_failed_time = 6;
  inline bool has_lastest_failed_time() const;
  inline void clear_lastest_failed_time();
  static const int kLastestFailedTimeFieldNumber = 6;
  inline const ::std::string& lastest_failed_time() const;
  inline void set_lastest_failed_time(const ::std::string& value);
  inline void set_lastest_failed_time(const char* value);
  inline void set_lastest_failed_time(const char* value, size_t size);
  inline ::std::string* mutable_lastest_failed_time();
  inline ::std::string* release_lastest_failed_time();
  inline void set_allocated_lastest_failed_time(::std::string* lastest_failed_time);

  // required int32 failed_files_num = 7;
  inline bool has_failed_files_num() const;
  inline void clear_failed_files_num();
  static const int kFailedFilesNumFieldNumber = 7;
  inline ::google::protobuf::int32 failed_files_num() const;
  inline void set_failed_files_num(::google::protobuf::int32 value);

  // required string failed_files_name = 8;
  inline bool has_failed_files_name() const;
  inline void clear_failed_files_name();
  static const int kFailedFilesNameFieldNumber = 8;
  inline const ::std::string& failed_files_name() const;
  inline void set_failed_files_name(const ::std::string& value);
  inline void set_failed_files_name(const char* value);
  inline void set_failed_files_name(const char* value, size_t size);
  inline ::std::string* mutable_failed_files_name();
  inline ::std::string* release_failed_files_name();
  inline void set_allocated_failed_files_name(::std::string* failed_files_name);

  // required int32 failed_files_size = 9;
  inline bool has_failed_files_size() const;
  inline void clear_failed_files_size();
  static const int kFailedFilesSizeFieldNumber = 9;
  inline ::google::protobuf::int32 failed_files_size() const;
  inline void set_failed_files_size(::google::protobuf::int32 value);

  // required int32 gpload_longest_timeused = 10;
  inline bool has_gpload_longest_timeused() const;
  inline void clear_gpload_longest_timeused();
  static const int kGploadLongestTimeusedFieldNumber = 10;
  inline ::google::protobuf::int32 gpload_longest_timeused() const;
  inline void set_gpload_longest_timeused(::google::protobuf::int32 value);

  // required int32 gpload_latest_timeused = 11;
  inline bool has_gpload_latest_timeused() const;
  inline void clear_gpload_latest_timeused();
  static const int kGploadLatestTimeusedFieldNumber = 11;
  inline ::google::protobuf::int32 gpload_latest_timeused() const;
  inline void set_gpload_latest_timeused(::google::protobuf::int32 value);

  // required int32 gpload_average_timeused = 12;
  inline bool has_gpload_average_timeused() const;
  inline void clear_gpload_average_timeused();
  static const int kGploadAverageTimeusedFieldNumber = 12;
  inline ::google::protobuf::int32 gpload_average_timeused() const;
  inline void set_gpload_average_timeused(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gpstall.ServiceStatus)
 private:
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_service_status();
  inline void clear_has_service_status();
  inline void set_has_conn_num();
  inline void clear_has_conn_num();
  inline void set_has_qps();
  inline void clear_has_qps();
  inline void set_has_gpload_failed_num();
  inline void clear_has_gpload_failed_num();
  inline void set_has_lastest_failed_time();
  inline void clear_has_lastest_failed_time();
  inline void set_has_failed_files_num();
  inline void clear_has_failed_files_num();
  inline void set_has_failed_files_name();
  inline void clear_has_failed_files_name();
  inline void set_has_failed_files_size();
  inline void clear_has_failed_files_size();
  inline void set_has_gpload_longest_timeused();
  inline void clear_has_gpload_longest_timeused();
  inline void set_has_gpload_latest_timeused();
  inline void clear_has_gpload_latest_timeused();
  inline void set_has_gpload_average_timeused();
  inline void clear_has_gpload_average_timeused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* start_time_;
  int service_status_;
  ::google::protobuf::int32 conn_num_;
  ::google::protobuf::int32 qps_;
  ::google::protobuf::int32 gpload_failed_num_;
  ::std::string* lastest_failed_time_;
  ::std::string* failed_files_name_;
  ::google::protobuf::int32 failed_files_num_;
  ::google::protobuf::int32 failed_files_size_;
  ::google::protobuf::int32 gpload_longest_timeused_;
  ::google::protobuf::int32 gpload_latest_timeused_;
  ::google::protobuf::int32 gpload_average_timeused_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_monitor_2eproto();
  friend void protobuf_AssignDesc_monitor_2eproto();
  friend void protobuf_ShutdownFile_monitor_2eproto();

  void InitAsDefaultInstance();
  static ServiceStatus* default_instance_;
};
// ===================================================================


// ===================================================================

// Command

// required string command = 1 [default = "error"];
inline bool Command::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_command() {
  if (command_ != _default_command_) {
    command_->assign(*_default_command_);
  }
  clear_has_command();
}
inline const ::std::string& Command::command() const {
  return *command_;
}
inline void Command::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == _default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value) {
  set_has_command();
  if (command_ == _default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(value);
}
inline void Command::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == _default_command_) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Command::mutable_command() {
  set_has_command();
  if (command_ == _default_command_) {
    command_ = new ::std::string(*_default_command_);
  }
  return command_;
}
inline ::std::string* Command::release_command() {
  clear_has_command();
  if (command_ == _default_command_) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(_default_command_);
    return temp;
  }
}
inline void Command::set_allocated_command(::std::string* command) {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(_default_command_);
  }
}

// -------------------------------------------------------------------

// ServiceStatus

// required string start_time = 1;
inline bool ServiceStatus::has_start_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceStatus::set_has_start_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServiceStatus::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServiceStatus::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& ServiceStatus::start_time() const {
  return *start_time_;
}
inline void ServiceStatus::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void ServiceStatus::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void ServiceStatus::set_start_time(const char* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceStatus::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  return start_time_;
}
inline ::std::string* ServiceStatus::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceStatus::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
inline bool ServiceStatus::has_service_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceStatus::set_has_service_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServiceStatus::clear_has_service_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServiceStatus::clear_service_status() {
  service_status_ = 2;
  clear_has_service_status();
}
inline ::gpstall::ServiceStatus_Status ServiceStatus::service_status() const {
  return static_cast< ::gpstall::ServiceStatus_Status >(service_status_);
}
inline void ServiceStatus::set_service_status(::gpstall::ServiceStatus_Status value) {
  assert(::gpstall::ServiceStatus_Status_IsValid(value));
  set_has_service_status();
  service_status_ = value;
}

// required int32 conn_num = 3;
inline bool ServiceStatus::has_conn_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceStatus::set_has_conn_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServiceStatus::clear_has_conn_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServiceStatus::clear_conn_num() {
  conn_num_ = 0;
  clear_has_conn_num();
}
inline ::google::protobuf::int32 ServiceStatus::conn_num() const {
  return conn_num_;
}
inline void ServiceStatus::set_conn_num(::google::protobuf::int32 value) {
  set_has_conn_num();
  conn_num_ = value;
}

// required int32 qps = 4;
inline bool ServiceStatus::has_qps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceStatus::set_has_qps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServiceStatus::clear_has_qps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServiceStatus::clear_qps() {
  qps_ = 0;
  clear_has_qps();
}
inline ::google::protobuf::int32 ServiceStatus::qps() const {
  return qps_;
}
inline void ServiceStatus::set_qps(::google::protobuf::int32 value) {
  set_has_qps();
  qps_ = value;
}

// required int32 gpload_failed_num = 5;
inline bool ServiceStatus::has_gpload_failed_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServiceStatus::set_has_gpload_failed_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServiceStatus::clear_has_gpload_failed_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServiceStatus::clear_gpload_failed_num() {
  gpload_failed_num_ = 0;
  clear_has_gpload_failed_num();
}
inline ::google::protobuf::int32 ServiceStatus::gpload_failed_num() const {
  return gpload_failed_num_;
}
inline void ServiceStatus::set_gpload_failed_num(::google::protobuf::int32 value) {
  set_has_gpload_failed_num();
  gpload_failed_num_ = value;
}

// required string lastest_failed_time = 6;
inline bool ServiceStatus::has_lastest_failed_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServiceStatus::set_has_lastest_failed_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServiceStatus::clear_has_lastest_failed_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServiceStatus::clear_lastest_failed_time() {
  if (lastest_failed_time_ != &::google::protobuf::internal::kEmptyString) {
    lastest_failed_time_->clear();
  }
  clear_has_lastest_failed_time();
}
inline const ::std::string& ServiceStatus::lastest_failed_time() const {
  return *lastest_failed_time_;
}
inline void ServiceStatus::set_lastest_failed_time(const ::std::string& value) {
  set_has_lastest_failed_time();
  if (lastest_failed_time_ == &::google::protobuf::internal::kEmptyString) {
    lastest_failed_time_ = new ::std::string;
  }
  lastest_failed_time_->assign(value);
}
inline void ServiceStatus::set_lastest_failed_time(const char* value) {
  set_has_lastest_failed_time();
  if (lastest_failed_time_ == &::google::protobuf::internal::kEmptyString) {
    lastest_failed_time_ = new ::std::string;
  }
  lastest_failed_time_->assign(value);
}
inline void ServiceStatus::set_lastest_failed_time(const char* value, size_t size) {
  set_has_lastest_failed_time();
  if (lastest_failed_time_ == &::google::protobuf::internal::kEmptyString) {
    lastest_failed_time_ = new ::std::string;
  }
  lastest_failed_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceStatus::mutable_lastest_failed_time() {
  set_has_lastest_failed_time();
  if (lastest_failed_time_ == &::google::protobuf::internal::kEmptyString) {
    lastest_failed_time_ = new ::std::string;
  }
  return lastest_failed_time_;
}
inline ::std::string* ServiceStatus::release_lastest_failed_time() {
  clear_has_lastest_failed_time();
  if (lastest_failed_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastest_failed_time_;
    lastest_failed_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceStatus::set_allocated_lastest_failed_time(::std::string* lastest_failed_time) {
  if (lastest_failed_time_ != &::google::protobuf::internal::kEmptyString) {
    delete lastest_failed_time_;
  }
  if (lastest_failed_time) {
    set_has_lastest_failed_time();
    lastest_failed_time_ = lastest_failed_time;
  } else {
    clear_has_lastest_failed_time();
    lastest_failed_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 failed_files_num = 7;
inline bool ServiceStatus::has_failed_files_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServiceStatus::set_has_failed_files_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServiceStatus::clear_has_failed_files_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServiceStatus::clear_failed_files_num() {
  failed_files_num_ = 0;
  clear_has_failed_files_num();
}
inline ::google::protobuf::int32 ServiceStatus::failed_files_num() const {
  return failed_files_num_;
}
inline void ServiceStatus::set_failed_files_num(::google::protobuf::int32 value) {
  set_has_failed_files_num();
  failed_files_num_ = value;
}

// required string failed_files_name = 8;
inline bool ServiceStatus::has_failed_files_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServiceStatus::set_has_failed_files_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServiceStatus::clear_has_failed_files_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServiceStatus::clear_failed_files_name() {
  if (failed_files_name_ != &::google::protobuf::internal::kEmptyString) {
    failed_files_name_->clear();
  }
  clear_has_failed_files_name();
}
inline const ::std::string& ServiceStatus::failed_files_name() const {
  return *failed_files_name_;
}
inline void ServiceStatus::set_failed_files_name(const ::std::string& value) {
  set_has_failed_files_name();
  if (failed_files_name_ == &::google::protobuf::internal::kEmptyString) {
    failed_files_name_ = new ::std::string;
  }
  failed_files_name_->assign(value);
}
inline void ServiceStatus::set_failed_files_name(const char* value) {
  set_has_failed_files_name();
  if (failed_files_name_ == &::google::protobuf::internal::kEmptyString) {
    failed_files_name_ = new ::std::string;
  }
  failed_files_name_->assign(value);
}
inline void ServiceStatus::set_failed_files_name(const char* value, size_t size) {
  set_has_failed_files_name();
  if (failed_files_name_ == &::google::protobuf::internal::kEmptyString) {
    failed_files_name_ = new ::std::string;
  }
  failed_files_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServiceStatus::mutable_failed_files_name() {
  set_has_failed_files_name();
  if (failed_files_name_ == &::google::protobuf::internal::kEmptyString) {
    failed_files_name_ = new ::std::string;
  }
  return failed_files_name_;
}
inline ::std::string* ServiceStatus::release_failed_files_name() {
  clear_has_failed_files_name();
  if (failed_files_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = failed_files_name_;
    failed_files_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServiceStatus::set_allocated_failed_files_name(::std::string* failed_files_name) {
  if (failed_files_name_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_files_name_;
  }
  if (failed_files_name) {
    set_has_failed_files_name();
    failed_files_name_ = failed_files_name;
  } else {
    clear_has_failed_files_name();
    failed_files_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 failed_files_size = 9;
inline bool ServiceStatus::has_failed_files_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServiceStatus::set_has_failed_files_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServiceStatus::clear_has_failed_files_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServiceStatus::clear_failed_files_size() {
  failed_files_size_ = 0;
  clear_has_failed_files_size();
}
inline ::google::protobuf::int32 ServiceStatus::failed_files_size() const {
  return failed_files_size_;
}
inline void ServiceStatus::set_failed_files_size(::google::protobuf::int32 value) {
  set_has_failed_files_size();
  failed_files_size_ = value;
}

// required int32 gpload_longest_timeused = 10;
inline bool ServiceStatus::has_gpload_longest_timeused() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServiceStatus::set_has_gpload_longest_timeused() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServiceStatus::clear_has_gpload_longest_timeused() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServiceStatus::clear_gpload_longest_timeused() {
  gpload_longest_timeused_ = 0;
  clear_has_gpload_longest_timeused();
}
inline ::google::protobuf::int32 ServiceStatus::gpload_longest_timeused() const {
  return gpload_longest_timeused_;
}
inline void ServiceStatus::set_gpload_longest_timeused(::google::protobuf::int32 value) {
  set_has_gpload_longest_timeused();
  gpload_longest_timeused_ = value;
}

// required int32 gpload_latest_timeused = 11;
inline bool ServiceStatus::has_gpload_latest_timeused() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServiceStatus::set_has_gpload_latest_timeused() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServiceStatus::clear_has_gpload_latest_timeused() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServiceStatus::clear_gpload_latest_timeused() {
  gpload_latest_timeused_ = 0;
  clear_has_gpload_latest_timeused();
}
inline ::google::protobuf::int32 ServiceStatus::gpload_latest_timeused() const {
  return gpload_latest_timeused_;
}
inline void ServiceStatus::set_gpload_latest_timeused(::google::protobuf::int32 value) {
  set_has_gpload_latest_timeused();
  gpload_latest_timeused_ = value;
}

// required int32 gpload_average_timeused = 12;
inline bool ServiceStatus::has_gpload_average_timeused() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServiceStatus::set_has_gpload_average_timeused() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServiceStatus::clear_has_gpload_average_timeused() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServiceStatus::clear_gpload_average_timeused() {
  gpload_average_timeused_ = 0;
  clear_has_gpload_average_timeused();
}
inline ::google::protobuf::int32 ServiceStatus::gpload_average_timeused() const {
  return gpload_average_timeused_;
}
inline void ServiceStatus::set_gpload_average_timeused(::google::protobuf::int32 value) {
  set_has_gpload_average_timeused();
  gpload_average_timeused_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpstall

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gpstall::ServiceStatus_Status>() {
  return ::gpstall::ServiceStatus_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_monitor_2eproto__INCLUDED
