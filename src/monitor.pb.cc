// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gpstall {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceStatus_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_monitor_2eproto() {
  protobuf_AddDesc_monitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "monitor.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  ServiceStatus_descriptor_ = file->message_type(1);
  static const int ServiceStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, service_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, conn_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, qps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, gpload_failed_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, lastest_failed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, failed_files_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, failed_files_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, failed_files_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, gpload_longest_timeused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, gpload_latest_timeused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, gpload_average_timeused_),
  };
  ServiceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceStatus_descriptor_,
      ServiceStatus::default_instance_,
      ServiceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceStatus));
  ServiceStatus_Status_descriptor_ = ServiceStatus_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_monitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceStatus_descriptor_, &ServiceStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_monitor_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete Command::_default_command_;
  delete ServiceStatus::default_instance_;
  delete ServiceStatus_reflection_;
}

void protobuf_AddDesc_monitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmonitor.proto\022\007gpstall\"!\n\007Command\022\026\n\007c"
    "ommand\030\001 \002(\t:\005error\"\230\003\n\rServiceStatus\022\022\n"
    "\nstart_time\030\001 \002(\t\022=\n\016service_status\030\002 \002("
    "\0162\035.gpstall.ServiceStatus.Status:\006UNKNOW"
    "\022\020\n\010conn_num\030\003 \002(\005\022\013\n\003qps\030\004 \002(\005\022\031\n\021gploa"
    "d_failed_num\030\005 \002(\005\022\033\n\023lastest_failed_tim"
    "e\030\006 \002(\t\022\030\n\020failed_files_num\030\007 \002(\005\022\031\n\021fai"
    "led_files_name\030\010 \002(\t\022\031\n\021failed_files_siz"
    "e\030\t \002(\005\022\037\n\027gpload_longest_timeused\030\n \002(\005"
    "\022\036\n\026gpload_latest_timeused\030\013 \002(\005\022\037\n\027gplo"
    "ad_average_timeused\030\014 \002(\005\"+\n\006Status\022\n\n\006O"
    "NLINE\020\000\022\t\n\005STALL\020\001\022\n\n\006UNKNOW\020\002", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "monitor.proto", &protobuf_RegisterTypes);
  Command::_default_command_ =
      new ::std::string("error", 5);
  Command::default_instance_ = new Command();
  ServiceStatus::default_instance_ = new ServiceStatus();
  Command::default_instance_->InitAsDefaultInstance();
  ServiceStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_monitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_monitor_2eproto {
  StaticDescriptorInitializer_monitor_2eproto() {
    protobuf_AddDesc_monitor_2eproto();
  }
} static_descriptor_initializer_monitor_2eproto_;

// ===================================================================

::std::string* Command::_default_command_ = NULL;
#ifndef _MSC_VER
const int Command::kCommandFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(_default_command_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  SharedDtor();
}

void Command::SharedDtor() {
  if (command_ != _default_command_) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != _default_command_) {
        command_->assign(*_default_command_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1 [default = "error"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1 [default = "error"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1 [default = "error"];
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1 [default = "error"];
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServiceStatus_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStatus_Status_descriptor_;
}
bool ServiceStatus_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServiceStatus_Status ServiceStatus::ONLINE;
const ServiceStatus_Status ServiceStatus::STALL;
const ServiceStatus_Status ServiceStatus::UNKNOW;
const ServiceStatus_Status ServiceStatus::Status_MIN;
const ServiceStatus_Status ServiceStatus::Status_MAX;
const int ServiceStatus::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServiceStatus::kStartTimeFieldNumber;
const int ServiceStatus::kServiceStatusFieldNumber;
const int ServiceStatus::kConnNumFieldNumber;
const int ServiceStatus::kQpsFieldNumber;
const int ServiceStatus::kGploadFailedNumFieldNumber;
const int ServiceStatus::kLastestFailedTimeFieldNumber;
const int ServiceStatus::kFailedFilesNumFieldNumber;
const int ServiceStatus::kFailedFilesNameFieldNumber;
const int ServiceStatus::kFailedFilesSizeFieldNumber;
const int ServiceStatus::kGploadLongestTimeusedFieldNumber;
const int ServiceStatus::kGploadLatestTimeusedFieldNumber;
const int ServiceStatus::kGploadAverageTimeusedFieldNumber;
#endif  // !_MSC_VER

ServiceStatus::ServiceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServiceStatus::InitAsDefaultInstance() {
}

ServiceStatus::ServiceStatus(const ServiceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServiceStatus::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  service_status_ = 2;
  conn_num_ = 0;
  qps_ = 0;
  gpload_failed_num_ = 0;
  lastest_failed_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  failed_files_num_ = 0;
  failed_files_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  failed_files_size_ = 0;
  gpload_longest_timeused_ = 0;
  gpload_latest_timeused_ = 0;
  gpload_average_timeused_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceStatus::~ServiceStatus() {
  SharedDtor();
}

void ServiceStatus::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (lastest_failed_time_ != &::google::protobuf::internal::kEmptyString) {
    delete lastest_failed_time_;
  }
  if (failed_files_name_ != &::google::protobuf::internal::kEmptyString) {
    delete failed_files_name_;
  }
  if (this != default_instance_) {
  }
}

void ServiceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceStatus_descriptor_;
}

const ServiceStatus& ServiceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_monitor_2eproto();
  return *default_instance_;
}

ServiceStatus* ServiceStatus::default_instance_ = NULL;

ServiceStatus* ServiceStatus::New() const {
  return new ServiceStatus;
}

void ServiceStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    service_status_ = 2;
    conn_num_ = 0;
    qps_ = 0;
    gpload_failed_num_ = 0;
    if (has_lastest_failed_time()) {
      if (lastest_failed_time_ != &::google::protobuf::internal::kEmptyString) {
        lastest_failed_time_->clear();
      }
    }
    failed_files_num_ = 0;
    if (has_failed_files_name()) {
      if (failed_files_name_ != &::google::protobuf::internal::kEmptyString) {
        failed_files_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    failed_files_size_ = 0;
    gpload_longest_timeused_ = 0;
    gpload_latest_timeused_ = 0;
    gpload_average_timeused_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_service_status;
        break;
      }

      // required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_service_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gpstall::ServiceStatus_Status_IsValid(value)) {
            set_service_status(static_cast< ::gpstall::ServiceStatus_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_conn_num;
        break;
      }

      // required int32 conn_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conn_num_)));
          set_has_conn_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_qps;
        break;
      }

      // required int32 qps = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qps_)));
          set_has_qps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gpload_failed_num;
        break;
      }

      // required int32 gpload_failed_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpload_failed_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpload_failed_num_)));
          set_has_gpload_failed_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lastest_failed_time;
        break;
      }

      // required string lastest_failed_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastest_failed_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastest_failed_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastest_failed_time().data(), this->lastest_failed_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_failed_files_num;
        break;
      }

      // required int32 failed_files_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_files_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_files_num_)));
          set_has_failed_files_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_failed_files_name;
        break;
      }

      // required string failed_files_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_failed_files_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_failed_files_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->failed_files_name().data(), this->failed_files_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_failed_files_size;
        break;
      }

      // required int32 failed_files_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_files_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_files_size_)));
          set_has_failed_files_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gpload_longest_timeused;
        break;
      }

      // required int32 gpload_longest_timeused = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpload_longest_timeused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpload_longest_timeused_)));
          set_has_gpload_longest_timeused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_gpload_latest_timeused;
        break;
      }

      // required int32 gpload_latest_timeused = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpload_latest_timeused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpload_latest_timeused_)));
          set_has_gpload_latest_timeused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gpload_average_timeused;
        break;
      }

      // required int32 gpload_average_timeused = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpload_average_timeused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpload_average_timeused_)));
          set_has_gpload_average_timeused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServiceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->start_time(), output);
  }

  // required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
  if (has_service_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service_status(), output);
  }

  // required int32 conn_num = 3;
  if (has_conn_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->conn_num(), output);
  }

  // required int32 qps = 4;
  if (has_qps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->qps(), output);
  }

  // required int32 gpload_failed_num = 5;
  if (has_gpload_failed_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gpload_failed_num(), output);
  }

  // required string lastest_failed_time = 6;
  if (has_lastest_failed_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastest_failed_time().data(), this->lastest_failed_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->lastest_failed_time(), output);
  }

  // required int32 failed_files_num = 7;
  if (has_failed_files_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->failed_files_num(), output);
  }

  // required string failed_files_name = 8;
  if (has_failed_files_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failed_files_name().data(), this->failed_files_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->failed_files_name(), output);
  }

  // required int32 failed_files_size = 9;
  if (has_failed_files_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->failed_files_size(), output);
  }

  // required int32 gpload_longest_timeused = 10;
  if (has_gpload_longest_timeused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gpload_longest_timeused(), output);
  }

  // required int32 gpload_latest_timeused = 11;
  if (has_gpload_latest_timeused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gpload_latest_timeused(), output);
  }

  // required int32 gpload_average_timeused = 12;
  if (has_gpload_average_timeused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gpload_average_timeused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServiceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->start_time(), target);
  }

  // required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
  if (has_service_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service_status(), target);
  }

  // required int32 conn_num = 3;
  if (has_conn_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->conn_num(), target);
  }

  // required int32 qps = 4;
  if (has_qps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->qps(), target);
  }

  // required int32 gpload_failed_num = 5;
  if (has_gpload_failed_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gpload_failed_num(), target);
  }

  // required string lastest_failed_time = 6;
  if (has_lastest_failed_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastest_failed_time().data(), this->lastest_failed_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lastest_failed_time(), target);
  }

  // required int32 failed_files_num = 7;
  if (has_failed_files_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->failed_files_num(), target);
  }

  // required string failed_files_name = 8;
  if (has_failed_files_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->failed_files_name().data(), this->failed_files_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->failed_files_name(), target);
  }

  // required int32 failed_files_size = 9;
  if (has_failed_files_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->failed_files_size(), target);
  }

  // required int32 gpload_longest_timeused = 10;
  if (has_gpload_longest_timeused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gpload_longest_timeused(), target);
  }

  // required int32 gpload_latest_timeused = 11;
  if (has_gpload_latest_timeused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gpload_latest_timeused(), target);
  }

  // required int32 gpload_average_timeused = 12;
  if (has_gpload_average_timeused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gpload_average_timeused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServiceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // required .gpstall.ServiceStatus.Status service_status = 2 [default = UNKNOW];
    if (has_service_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->service_status());
    }

    // required int32 conn_num = 3;
    if (has_conn_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conn_num());
    }

    // required int32 qps = 4;
    if (has_qps()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qps());
    }

    // required int32 gpload_failed_num = 5;
    if (has_gpload_failed_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpload_failed_num());
    }

    // required string lastest_failed_time = 6;
    if (has_lastest_failed_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastest_failed_time());
    }

    // required int32 failed_files_num = 7;
    if (has_failed_files_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_files_num());
    }

    // required string failed_files_name = 8;
    if (has_failed_files_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->failed_files_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 failed_files_size = 9;
    if (has_failed_files_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_files_size());
    }

    // required int32 gpload_longest_timeused = 10;
    if (has_gpload_longest_timeused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpload_longest_timeused());
    }

    // required int32 gpload_latest_timeused = 11;
    if (has_gpload_latest_timeused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpload_latest_timeused());
    }

    // required int32 gpload_average_timeused = 12;
    if (has_gpload_average_timeused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpload_average_timeused());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceStatus::MergeFrom(const ServiceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_service_status()) {
      set_service_status(from.service_status());
    }
    if (from.has_conn_num()) {
      set_conn_num(from.conn_num());
    }
    if (from.has_qps()) {
      set_qps(from.qps());
    }
    if (from.has_gpload_failed_num()) {
      set_gpload_failed_num(from.gpload_failed_num());
    }
    if (from.has_lastest_failed_time()) {
      set_lastest_failed_time(from.lastest_failed_time());
    }
    if (from.has_failed_files_num()) {
      set_failed_files_num(from.failed_files_num());
    }
    if (from.has_failed_files_name()) {
      set_failed_files_name(from.failed_files_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_failed_files_size()) {
      set_failed_files_size(from.failed_files_size());
    }
    if (from.has_gpload_longest_timeused()) {
      set_gpload_longest_timeused(from.gpload_longest_timeused());
    }
    if (from.has_gpload_latest_timeused()) {
      set_gpload_latest_timeused(from.gpload_latest_timeused());
    }
    if (from.has_gpload_average_timeused()) {
      set_gpload_average_timeused(from.gpload_average_timeused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceStatus::CopyFrom(const ServiceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void ServiceStatus::Swap(ServiceStatus* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(service_status_, other->service_status_);
    std::swap(conn_num_, other->conn_num_);
    std::swap(qps_, other->qps_);
    std::swap(gpload_failed_num_, other->gpload_failed_num_);
    std::swap(lastest_failed_time_, other->lastest_failed_time_);
    std::swap(failed_files_num_, other->failed_files_num_);
    std::swap(failed_files_name_, other->failed_files_name_);
    std::swap(failed_files_size_, other->failed_files_size_);
    std::swap(gpload_longest_timeused_, other->gpload_longest_timeused_);
    std::swap(gpload_latest_timeused_, other->gpload_latest_timeused_);
    std::swap(gpload_average_timeused_, other->gpload_average_timeused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceStatus_descriptor_;
  metadata.reflection = ServiceStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpstall

// @@protoc_insertion_point(global_scope)
